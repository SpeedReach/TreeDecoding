{"task_id": "HumanEval/0", "completion": "\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    return any(abs(a - b) < threshold for a, b in itertools.combinations(numbers, 2))\n"}
{"task_id": "HumanEval/2", "completion": "\ndef truncate_number(number: float) -> float:\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/5", "completion": "\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [delimeter] + numbers + [delimeter]\n"}
{"task_id": "HumanEval/6", "completion": "\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    return [len(s) - 1 for s in paren_string.split(' ')]\n"}
{"task_id": "HumanEval/7", "completion": "\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    return (sum(numbers), prod(numbers))\n"}
{"task_id": "HumanEval/9", "completion": "\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(numbers[i], *result[:i]))\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = \"\"\n    prefix = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            longest_palindrome = f\"{prefix}{suffix}{reverse(prefix)}\"\n            prefix = suffix\n    return longest_palindrome\n"}
{"task_id": "HumanEval/11", "completion": "\ndef string_xor(a: str, b: str) -> str:\n    return ''.join([ord(c) ^ ord(d) for c, d in zip(a, b)])\n"}
{"task_id": "HumanEval/12", "completion": "\ndef longest(strings: List[str]) -> Optional[str]:\n    return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return a // b\n"}
{"task_id": "HumanEval/14", "completion": "\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "\ndef string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string))\n"}
{"task_id": "HumanEval/17", "completion": "\ndef parse_music(music_string: str) -> List[int]:\n    notes = []\n    for c in music_string:\n        if c == 'o':\n            notes.append(4)\n        elif c == 'o|':\n            notes.append(2)\n        elif c == '.|':\n            notes.append(1)\n        else:\n            raise ValueError(\"Invalid note\")\n    return notes\n"}
{"task_id": "HumanEval/18", "completion": "\ndef how_many_times(string: str, substring: str) -> int:\n    return len([i for i, c in enumerate(string) if c == substring[0]])\n"}
{"task_id": "HumanEval/19", "completion": "\ndef sort_numbers(numbers: str) -> str:\n    numbers = numbers.split()\n    sorted_numbers = sorted(numbers)\n    return \" \".join(sorted_numbers)\n"}
{"task_id": "HumanEval/20", "completion": "\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    closest_distance = float(\"inf\")\n    for i in range(1, len(numbers)):\n        current_distance = numbers[i] - numbers[i-1]\n        if closest_pair is None or closest_distance > current_distance:\n            closest_pair = (numbers[i], numbers[i-1])\n            closest_distance = current_distance\n    return closest_pair\n"}
{"task_id": "HumanEval/22", "completion": "\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\nreturn len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\ndef largest_divisor(n):\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return None\n"}
{"task_id": "HumanEval/25", "completion": "\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n            while n % i == 0:\n                factors.append(i)\n                n = n // i\n    return factors\n"}
{"task_id": "HumanEval/27", "completion": "\ndef flip_case(string: str) -> str:\n    return string.lower() if string.islower() else string.upper()\n"}
{"task_id": "HumanEval/28", "completion": "\ndef concatenate(strings: List[str]) -> str:\n    return \",\".join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\ndef get_positive(l: list):\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\nimport math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + ... + xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n"}
{"task_id": "HumanEval/33", "completion": "\ndef sort_third(l):\n    return [l[i] if i % 3 != 0 else sorted(l[i // 3]) for i in range(len(l))]\n"}
{"task_id": "HumanEval/34", "completion": "\nreturn sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "completion": "\ndef max_element(l):\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/38", "completion": "\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\ndef prime_fib(n: int):\n    if n <= 1:\n        return 0\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"}
{"task_id": "HumanEval/40", "completion": "\ndef triples_sum_to_zero(l):\n    return any(sum(x) == 0 for x in itertools.combinations(l, 3))\n"}
{"task_id": "HumanEval/41", "completion": "\ndef car_race_collision(n: int):\n    return n * (n - 1) / 2\n"}
{"task_id": "HumanEval/42", "completion": "\ndef incr_list(l: list):\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\ndef pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\ndef change_base(x: int, base: int) -> str:\n    return format(x, base)\n"}
{"task_id": "HumanEval/45", "completion": "\ndef triangle_area(a, h):\n    return a * h / 2\n"}
{"task_id": "HumanEval/46", "completion": "\ndef fib4(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "HumanEval/47", "completion": "\ndef median(l: list):\n    return l[len(l) // 2]\n"}
{"task_id": "HumanEval/48", "completion": "\ndef is_palindrome(text: str):\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\ndef modp(n, p):\n    return pow(n, p, mod=p)\n"}
{"task_id": "HumanEval/51", "completion": "\ndef remove_vowels(text):\n    return ''.join([c for c in text if c not in 'aeiou'])\n"}
{"task_id": "HumanEval/53", "completion": "\ndef add(x: int, y: int) -> int:\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\ndef same_chars(s0: str, s1: str) -> bool:\n    return len(set(s0)) == len(set(s1))\n"}
{"task_id": "HumanEval/55", "completion": "\ndef fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "HumanEval/56", "completion": "\ndef correct_bracketing(brackets: str):\n    return len(brackets) == len(brackets.split(\">\"))\n"}
{"task_id": "HumanEval/57", "completion": "\ndef monotonic(l: list):\n    return sorted(l) == l\n"}
{"task_id": "HumanEval/58", "completion": "\ndef common(l1: list, l2: list) -> list:\n    common_elements = set().intersection(l1, l2)\n    return list(common_elements)\n"}
{"task_id": "HumanEval/59", "completion": "\ndef largest_prime_factor(n: int):\n    for p in range(2, int(n ** 0.5) + 1):\n        if n % p == 0:\n            return p\n    return None\n"}
{"task_id": "HumanEval/60", "completion": "\ndef sum_to_n(n: int):\n    return sum(range(1, n+1))\n"}
{"task_id": "HumanEval/61", "completion": "\ndef correct_bracketing(brackets: str):\n    return len(brackets) == len(brackets.split(\"))\")\n"}
{"task_id": "HumanEval/63", "completion": "\ndef fibfib(n: int):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n"}
{"task_id": "HumanEval/64", "completion": "\ndef vowels_count(s):\n    return len([c for c in s if c in 'aeiouy'])\n"}
{"task_id": "HumanEval/65", "completion": "\ndef circular_shift(x, shift):\n    return str(x // (shift + 1)) + str(x % (shift + 1))\n"}
{"task_id": "HumanEval/66", "completion": "\ndef digitSum(s):\n    return sum(ord(c) for c in s[1:])\n"}
{"task_id": "HumanEval/67", "completion": "\ndef fruit_distribution(s, n):\n    apples = int(s.count(\"apples\"))\n    oranges = int(s.count(\"oranges\"))\n    mangoes = n - apples - oranges\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    smallest_value = None\n    smallest_index = None\n    for node in arr:\n        if smallest_value is None or node.value < smallest_value:\n            smallest_value = node.value\n            smallest_index = arr.index(node)\n    return [smallest_value, smallest_index] if smallest_value is not None else []\n"}
{"task_id": "HumanEval/69", "completion": "\ndef search(lst):\n    max_frequency = 0\n    max_value = -1\n    for num in lst:\n        if num > 0 and lst.count(num) >= num:\n            max_frequency = max(max_frequency, lst.count(num))\n            max_value = max(max_value, num)\n    return max_value\n"}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    return sorted(lst, key=lambda x: (min(lst), max(lst), x))\n"}
{"task_id": "HumanEval/71", "completion": "\ndef triangle_area(a, b, c):\n    if a + b > c or a + c > b or b + c > a:\n        return -1\n    area = (a * b * c) // 6\n    return round(area, 2)\n"}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q, w):\n    return all(x < w for x in q) and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "\ndef smallest_change(arr):\n    smallest_change = len(arr)\n    for i in range(len(arr)):\n        for j in range(i, len(arr) - i - 1):\n            if arr[i] != arr[j]:\n                smallest_change = min(smallest_change, len(arr) - i - 1)\n    return smallest_change\n"}
{"task_id": "HumanEval/74", "completion": "\ndef total_match(lst1, lst2):\n    return lst1 if len(lst1) < len(lst2) else lst2\n"}
{"task_id": "HumanEval/75", "completion": "\ndef is_multiply_prime(a):\n    if a < 100:\n        for p in range(3, int(a ** 0.5) + 1):\n            if a % p == 0:\n                return False\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/76", "completion": "\ndef is_simple_power(x, n):\n    return x == n ** int(x)\n"}
{"task_id": "HumanEval/77", "completion": "\ndef iscube(a):\n    return a ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    prime_digits = 0\n    for digit in num:\n        if digit in (2, 3, 5, 7, B, D):\n            prime_digits += 1\n    return prime_digits\n"}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    return \"db\" + str(decimal).zfill(8) + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    return len(s) >= 3 and all(c not in s[i:i+3] for i in range(len(s)-2))\n"}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    grades = [4.0, 3, 1.7, 2, 3.5]\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        else:\n            letter_grades.append(\"D\")\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, len(string), 2):\n        if string[i] == string[i-1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    count = 0\n    for i in range(n):\n        if str(i)[:1] == \"1\":\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "\ndef solve(N):\n    total = 0\n    while N > 0:\n        total = total * 2 + int(N % 10)\n        N //= 10\n    return str(total)\n"}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    even_indices = [i for i in range(len(lst)) if lst[i] % 2 == 0]\n    return sum(lst[i] for i in even_indices)\n"}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s):\n    return ''.join(sorted(s.split()))\n"}
{"task_id": "HumanEval/87", "completion": "\ndef get_row(lst, x):\n    row_coords = []\n    for i in range(len(lst)):\n        col_coords = []\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                col_coords.append((i, j))\n        row_coords.append(col_coords)\n    return row_coords\n"}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    if sum(array) % 2 == 0:\n        return array\n    else:\n        return sorted(array)\n"}
{"task_id": "HumanEval/89", "completion": "\ndef encrypt(s):\n    return \"\".join([chr((ord(c) + 2 * (ord(c) % 2)) % 26) for c in s])\n"}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    return min(lst[1:], key=lambda x: lst.index(x))\n"}
{"task_id": "HumanEval/91", "completion": "\ndef is_bored(S):\n    count = 0\n    for sentence in S.split():\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\ndef any_int(x, y, z):\n    if x + y == z or y + z == x or x + y + z == 0:\n        return True\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "\ndef encode(message):\n    return ''.join([chr(ord(c) + 2) for c in message])\n"}
{"task_id": "HumanEval/94", "completion": "\ndef skjkasdkd(lst):\n    max_prime = None\n    max_sum = 0\n    for num in lst:\n        if num > 0 and num % 2 == 1:\n            if max_prime is None or num > max_sum:\n                max_prime = num\n                max_sum = num\n            elif num > max_sum:\n                max_sum = num\n    return max_sum\n"}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    return all(k.isalpha() and k.lower() == k or k.isalpha() and k.upper() == k for k in dict)\n"}
{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(n):\n    prime_numbers = []\n    for i in range(1, n+1):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\n"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    return int(a % 10) * int(b % 10)\n"}
{"task_id": "HumanEval/98", "completion": "\ndef count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\ndef closest_integer(value):\n    return round(value, 0)\n"}
{"task_id": "HumanEval/100", "completion": "\ndef make_a_pile(n):\n    return [n, (n + 1) if n % 2 else (n + 2), (n + 3) if n % 2 else (n + 4), ...]\n"}
{"task_id": "HumanEval/101", "completion": "\nwords = s.split(\",\")\n"}
{"task_id": "HumanEval/102", "completion": "\ndef choose_num(x, y):\n    if x > y:\n        return max(x, y)\n    else:\n        return min(x, y)\n"}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    avg = total // (m-n+1)\n    return format(avg, '0b')\n"}
{"task_id": "HumanEval/104", "completion": "\ndef unique_digits(x):\n    return sorted(set(x) - {0, 2})\n"}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    sorted_arr = arr.sort()\n    reversed_arr = sorted_arr[::-1]\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [names[i] for i in reversed_arr]\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\ndef f(n):\n    return [1 if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]\n"}
{"task_id": "HumanEval/108", "completion": "\ndef count_nums(arr):\n    return sum(map(lambda x: x if x > 0 else -x, arr))\n"}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    n = len(arr)\n    while n > 1:\n        right_shifts = 0\n        for i in range(n-1):\n            if arr[i] > arr[i+1]:\n                right_shifts += 1\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n        n -= right_shifts\n    return n == 1\n"}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(lst1, lst2):\n    if len(lst1) != len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != lst2[i] % 2:\n            return \"NO\"\n    return \"YES\"\n"}
{"task_id": "HumanEval/111", "completion": "\ndef histogram(test):\n    counts = {}\n    for letter in test:\n        counts[letter] = counts.get(letter, 0) + 1\n    return counts\n"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s, c):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] in c:\n            j = len(s) - i - 1\n            result += s[j]\n            s = s[:i] + s[j:]\n        else:\n            result += s[i]\n    return result, bool(s == reverse_delete(s, c))\n"}
{"task_id": "HumanEval/113", "completion": "\ndef odd_count(lst):\n    return [f\"the number of odd elements {i} in the string {lst[i]} of the input.\" for i in range(len(lst))]\n"}
{"task_id": "HumanEval/114", "completion": "\ndef minSubArraySum(nums):\n    return min(sum(nums[i:]) for i in range(len(nums) - 1))\n"}
{"task_id": "HumanEval/115", "completion": "\ndef max_fill(grid, capacity):\n    import math\n    n = len(grid)\n    m = len(grid[0])\n    fill = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                fill += 1\n                if fill >= capacity:\n                    fill = 0\n                    for k in range(n):\n                        grid[k][j] = 0\n    return fill\n"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: bin(x).count('1'))\n"}
{"task_id": "HumanEval/117", "completion": "\ndef select_words(s, n):\n    words = []\n    for word in s.split():\n        if len(word) == n:\n            words.append(word)\n    return words\n"}
{"task_id": "HumanEval/118", "completion": "\ndef get_closest_vowel(word):\n    closest_vowel = \"\"\n    for i in range(1, len(word) - 1):\n        if word[i] in \"aeiou\":\n            closest_vowel = word[i]\n            break\n    return closest_vowel\n"}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    return 'Yes' if len(lst) == 1 and lst[0] == '(' else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\ndef maximum(arr, k):\n    max_values = []\n    for i in range(k):\n        max_values.append(max(arr[:i]))\n    return max_values\n"}
{"task_id": "HumanEval/121", "completion": "\ndef solution(lst):\n    odd_sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            odd_sum += lst[i]\n    return odd_sum\n"}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum\n"}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(n):\n    odd_numbers = []\n    for _ in range(1, int(n ** 0.5) + 1):\n        if n % 2 == 1:\n            odd_numbers.append(n)\n            n = 3 * n + 1\n        else:\n            odd_numbers.append(n)\n            n = n // 2\n    return odd_numbers\n"}
{"task_id": "HumanEval/124", "completion": "\ndef valid_date(date):\n    # Check if the date string is not empty\n    if not date:\n        return False\n\n    # Check if the number of days is valid for the month\n    month = date.split('-')[1]\n    days = int(date.split('-')[2])\n    if month in ['1', '3', '5', '7', '8', '10', '12'] and days < 1 or days > 31:\n        return False\n    elif month in ['4', '6', '9', '11'] and days < 1 or days > 30:\n        return False\n    elif month == '2' and days < 1 or days > 29:\n        return False\n\n    # Check if the month is valid\n    if month not in range(1, 13):\n        return False\n\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\ndef split_words(txt):\n    words = []\n    for c in txt:\n        if c == ' ' or c == ',':\n            words.append(c)\n    return words\n"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    return len(set(lst)) == len(lst)\n"}
{"task_id": "HumanEval/127", "completion": "\ndef intersection(interval1, interval2):\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    return interval1[1] - interval1[0] if interval1[1] < interval2[1] else interval2[1] - interval2[0]\n"}
{"task_id": "HumanEval/128", "completion": "\ndef prod_signs(arr):\n    prod = 0\n    for num in arr:\n        if num == 1:\n            prod *= num\n        elif num == -1:\n            prod *= -num\n        else:\n            prod = None\n    return prod\n"}
{"task_id": "HumanEval/129", "completion": "\ndef minPath(grid, k):\n    # Initialize a priority queue to store the cells to visit\n    queue = deque([(0, 0)])\n\n    # Add the starting cell to the queue\n    queue.append((0, grid[0][0]))\n\n    # While the queue is not empty\n    while queue:\n        # Dequeue the cell with the smallest distance from the starting cell\n        distance, cell = queue.popleft()\n\n        # If the distance is equal to k, return the list of cell values\n        if distance == k:\n            return [grid[cell[0]][cell[1]]]\n\n        # Add the neighbors of the dequeued cell to the queue\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == cell[0] or grid[i][j] == cell[1]:\n                    queue.append((distance + 1, (i, j)))\n\n    # If the queue is empty and the distance is less than k, return an empty list\n    return []\n"}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    result = []\n    if n == 0:\n        return result\n    else:\n        if n % 2 == 0:\n            result.append(n / 2)\n        else:\n            result = result + [tri(n - 1), tri(n - 2), tri(n + 1)]\n    return result\n"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    prod = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            prod *= digit\n        n //= 10\n    return prod\n"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    return any(char == '[' and is_nested(string[len(char):]) for char in string)\n"}
{"task_id": "HumanEval/133", "completion": "\ndef sum_squares(lst):\n    return sum(map(lambda x: int(x ** 2), lst))\n"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    return not txt.endswith(\" \") and txt[-1].isalpha()\n"}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(arr):\n    n = len(arr)\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\ndef largest_smallest_integers(lst):\n    largest = None\n    smallest = None\n    for num in lst:\n        if num < 0:\n            largest = max(largest, num)\n        elif num > 0:\n            smallest = min(smallest, num)\n    return largest, smallest\n"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n    else:\n        try:\n            a_float = float(a)\n            b_float = float(b)\n            if a_float > b_float:\n                return a_float\n            elif a_float < b_float:\n                return b_float\n        except ValueError:\n            return None\n"}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    return n % 4 == 0\n"}
{"task_id": "HumanEval/139", "completion": "\ndef special_factorial(n):\n    return n * factorial(n-1) * factorial(n-2) * ... * factorial(1)\n"}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text):\n    return re.sub(r'\\s+', '_', text)\n"}
{"task_id": "HumanEval/141", "completion": "\ndef file_name_check(file_name):\n    if len(file_name) > 3 or file_name.count('0') > 0 or file_name.count('.') < 1 or file_name.count('txt') < 1 or file_name.count('exe') < 1 or file_name.count('dll') < 1:\n        return 'No'\n    else:\n        return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\ndef sum_squares(lst):\n    return sum((x**2 if mod(i, 3) == 0 else x**3 if mod(i, 4) != 0 else x) for x in lst)\n"}
{"task_id": "HumanEval/143", "completion": "\ndef words_in_sentence(sentence):\n    prime_words = []\n    for word in sentence.split():\n        prime_words.append(word)\n        if len(prime_words) % 2 == 0:\n            prime_words.pop(0)\n    return \" \".join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    if x.isdigit() and n.isdigit():\n        num, den = map(int, x.split('/'))\n        if den == 1:\n            return True\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    return sorted(nums, key=lambda x: sum(map(int, str(x))), reverse=True)\n"}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and odd(num):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    a = [i * i - i + 1 for _ in range(n)]\n    return len(filter(lambda x: x[0] < x[1] < x[2] and x[0] + x[1] + x[2] % 3 == 0, product(a, repeat=2)))\n"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    planets = []\n    if planet1 == \"Mercury\" or planet2 == \"Mercury\":\n        return ()\n    elif planet1 == \"Venus\" or planet2 == \"Venus\":\n        return ()\n    elif planet1 == \"Earth\" or planet2 == \"Earth\":\n        return ()\n    elif planet1 == \"Mars\" or planet2 == \"Mars\":\n        return ()\n    elif planet1 == \"Jupiter\" or planet2 == \"Jupiter\":\n        return (\"Saturn\",)\n    elif planet1 == \"Saturn\" or planet2 == \"Saturn\":\n        return ()\n    elif planet1 == \"Uranus\" or planet2 == \"Uranus\":\n        return (\"Neptune\",)\n    else:\n        return ()\n"}
{"task_id": "HumanEval/149", "completion": "\ndef sorted_list_sum(lst):\n    return sorted(lst, key=len, reverse=True)\n"}
{"task_id": "HumanEval/150", "completion": "\ndef x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    else:\n        return x\n"}
{"task_id": "HumanEval/151", "completion": "\ndef double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 1:\n            total += num ** 2\n    return total\n"}
{"task_id": "HumanEval/152", "completion": "\ndef compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        diff = abs(guess[i] - game[i])\n        result.append(diff)\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "\ndef Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        strength = len(extension.title()) - len(extension.lower())\n        if strongest_extension is None or strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "\ndef cycpattern_check(a, b):\n    return any(b in word for word in a)\n"}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(num):\n    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n"}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(number):\n    roman = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    }\n    result = ''\n    while number > 0:\n        digit = number % 10\n        result = roman[digit] + result\n        number //= 10\n    return result.lower()\n"}
{"task_id": "HumanEval/157", "completion": "\ndef right_angle_triangle(a, b, c):\n    return a ** 2 + b ** 2 == c ** 2\n"}
{"task_id": "HumanEval/158", "completion": "\ndef find_max(words):\n    max_length = 0\n    max_word = \"\"\n    for word in words:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\ndef eat(number, need, remaining):\n    if number + need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [remaining, 0]\n"}
{"task_id": "HumanEval/160", "completion": "\ndef do_algebra(operator, operand):\n    result = []\n    for i in range(len(operator)):\n        op = operator[i]\n        if op == '+':\n            result.append(operand[i] + operand[i+1])\n        elif op == '-':\n            result.append(operand[i] - operand[i+1])\n        elif op == '*':\n            result.append(operand[i] * operand[i+1])\n        elif op == '/':\n            result.append(operand[i] // operand[i+1])\n        elif op == '**':\n            result.append(operand[i] ** operand[i+1])\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\ndef solve(s):\n    result = \"\"\n    for i in range(len(s)):\n        char = s[i]\n        if char.isalpha():\n            if char.lower() == char.upper():\n                result += char\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\nimport hashlib\n\ndef string_to_md5(text):\n    return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/107", "completion": ""}
{"task_id": "HumanEval/52", "completion": ""}
{"task_id": "HumanEval/50", "completion": ""}
{"task_id": "HumanEval/37", "completion": ""}
{"task_id": "HumanEval/21", "completion": ""}
{"task_id": "HumanEval/62", "completion": ""}
{"task_id": "HumanEval/26", "completion": ""}
{"task_id": "HumanEval/163", "completion": ""}
{"task_id": "HumanEval/4", "completion": ""}
{"task_id": "HumanEval/1", "completion": ""}
