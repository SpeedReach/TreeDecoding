{"id": "HumanEval/0", "model_memory": 36580.0, "time_taken": 12.835322856903076, "input_kv_memory": 36940.0, "memory_usage": [36940.0, 36966.0, 36966.0, 36966.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 36968.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37028.0, 37108.0, 37148.0, 37148.0, 37148.0, 37148.0, 37148.0, 37148.0, 37148.0, 37148.0, 37148.0, 37148.0, 37148.0, 37148.0, 37148.0, 37148.0, 37148.0, 37160.0, 37778.0, 38382.0, 38760.0, 39474.0, 40052.0, 40580.0, 41012.0, 41444.0, 41876.0, 42310.0, 42742.0], "time_metric": [1737129222.834513, 1737129222.9802368, 1737129223.1122406, 1737129223.2444427, 1737129223.375842, 1737129223.505589, 1737129223.6371946, 1737129223.7764819, 1737129223.908603, 1737129224.0488744, 1737129224.18369, 1737129224.3155978, 1737129224.4524405, 1737129224.5912964, 1737129224.7255847, 1737129224.8678036, 1737129225.007349, 1737129225.1535552, 1737129225.289031, 1737129225.4209974, 1737129225.5526977, 1737129225.6879911, 1737129225.8349729, 1737129225.9862807, 1737129226.1247606, 1737129226.2611167, 1737129226.4008608, 1737129226.5406222, 1737129226.6689274, 1737129226.799292, 1737129226.933398, 1737129227.071841, 1737129227.2115338, 1737129227.351072, 1737129227.4918745, 1737129227.6322901, 1737129227.776153, 1737129227.9187286, 1737129228.0553966, 1737129228.196557, 1737129228.336739, 1737129228.476265, 1737129228.6128404, 1737129228.7602918, 1737129228.9047856, 1737129229.0370345, 1737129229.1822271, 1737129229.3238795, 1737129229.4659252, 1737129229.60915, 1737129229.760707, 1737129229.9093127, 1737129230.0614352, 1737129230.206322, 1737129230.3476202, 1737129230.4927292, 1737129230.6357462, 1737129230.7760763, 1737129230.9170754, 1737129231.0624025, 1737129231.2088332, 1737129231.350533, 1737129231.5012388, 1737129231.6441252, 1737129231.793674, 1737129231.9385083, 1737129232.084797, 1737129232.2364295, 1737129232.3867655, 1737129232.537481, 1737129232.6810114, 1737129232.8223608, 1737129232.9637182, 1737129233.1061337, 1737129233.2528481, 1737129233.4131768, 1737129233.6383698, 1737129233.7922804, 1737129233.9414542, 1737129234.1501772, 1737129234.344504, 1737129234.5084069, 1737129234.6741803, 1737129234.8263097, 1737129234.9803753, 1737129235.154036, 1737129235.3101473], "score": 0, "output_len": 81, "output": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
