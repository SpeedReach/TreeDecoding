{"id": "HumanEval/0", "model_memory": 36588.0, "time_taken": 10.6257643699646, "input_kv_memory": 36948.0, "memory_usagetime_metric": [1737129211.8107395, 1737129211.926935, 1737129212.0485466, 1737129212.1754732, 1737129212.297598, 1737129212.4210932, 1737129212.5407708, 1737129212.6615481, 1737129212.7761562, 1737129212.9019337, 1737129213.024271, 1737129213.1454296, 1737129213.2733712, 1737129213.3937764, 1737129213.5170462, 1737129213.6376734, 1737129213.76445, 1737129213.8962195, 1737129214.0215924, 1737129214.1503592, 1737129214.2788844, 1737129214.4044821, 1737129214.5328283, 1737129214.659531, 1737129214.7794359, 1737129214.899496, 1737129215.0302606, 1737129215.1537452, 1737129215.2776651, 1737129215.4049766, 1737129215.5300486, 1737129215.683576, 1737129215.8061922, 1737129215.9282415, 1737129216.0540602, 1737129216.1832583, 1737129216.3114266, 1737129216.432121, 1737129216.5553763, 1737129216.680214, 1737129216.8083487, 1737129216.9374154, 1737129217.0618296, 1737129217.2031422, 1737129217.3351161, 1737129217.4655418, 1737129217.5970798, 1737129217.7193406, 1737129217.837446, 1737129217.9701514, 1737129218.1026115, 1737129218.2305524, 1737129218.3677006, 1737129218.4938374, 1737129218.6134946, 1737129218.7416596, 1737129218.8668003, 1737129218.9906611, 1737129219.1245341, 1737129219.255152, 1737129219.3792706, 1737129219.5142088, 1737129219.6439304, 1737129219.7715812, 1737129219.9048586, 1737129220.032564, 1737129220.1565278, 1737129220.2865536, 1737129220.4168503, 1737129220.5530314, 1737129220.6795917, 1737129220.8086538, 1737129220.936135, 1737129221.0778146, 1737129221.2184806, 1737129221.3511336, 1737129221.4898584, 1737129221.6199105, 1737129221.752541, 1737129221.8815286, 1737129222.0044425, 1737129222.137853], "score": 0, "output_len": 81, "output": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
